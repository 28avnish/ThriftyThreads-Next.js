generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma/client"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "product"]
}

// ===== User Models =====

model User {
  id        String   @id @default(cuid())
  name      String?
  mobile    String   @db.VarChar(10) // Optional: limits string to 10 characters at DB level
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  @@schema("auth")
}

// ===== Product Models =====

model Product {
  id              String  @id @default(cuid())
  isVisibleInHome Boolean @default(false)
  productName     String
  productSlug     String  @unique
  singleImage     Json?
  multipleImages  Json? // You can use JSON or stringified array
  discount        Float?

  categoryId Int // ðŸ‘ˆ foreign key
  category   Category @relation(fields: [categoryId], references: [id]) // ðŸ‘ˆ relation

  description String?
  prices      Price[] // ðŸ‘ˆ Relation to Price model
  createdAt   DateTime @default(now())

  @@schema("product")
}

model Price {
  id       Int    @id @default(autoincrement())
  size     String
  price    Float
  maxPrice Float?

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@schema("product")
}

model Category {
  id              Int     @id @default(autoincrement())
  categoryName    String
  isVisibleInHome Boolean @default(false)
  singleImage     Json?
  slug            String  @unique
  parentId        Int?

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[] // ðŸ‘ˆ relation from Category to Product

  @@schema("product")
}
